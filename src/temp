
"use strict";

import powerbi from "powerbi-visuals-api";
import "./../style/visual.less";

import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import IVisual = powerbi.extensibility.visual.IVisual;
import IVisualHost = powerbi.extensibility.visual.IVisualHost;
import DataView = powerbi.DataView;
import * as d3 from 'd3'
import { sankey, sankeyLinkHorizontal, sankeyJustify } from 'd3-sankey';

interface SankeyChartData {
    nodes: SankeyNode[];
    links: SankeyLink[];
}

interface SankeyNode {
    name: string;
    color?: string;

}

interface SankeyLink {
    source: number;
    target: number;
    value: number;
    color?: any;
}

export class Visual implements IVisual {
    private target: HTMLElement;
    private host: IVisualHost;

    constructor(options: VisualConstructorOptions) {
        this.target = options.element;
        this.host = options.host;


    }

    public update(options: VisualUpdateOptions) {
        const dataView: DataView = options.dataViews[0];
        let data: SankeyChartData = this.converter(dataView);
        this.render(data);

    }
    private converter(dataView: DataView): SankeyChartData {
        let nodes: SankeyNode[] = [];
        let links: SankeyLink[] = [];


        const categorical = dataView.categorical;

        if (!categorical || !categorical.categories || !categorical.values || categorical.categories.length < 2) {
            // Handle missing or invalid data view structure
            return { nodes: [], links: [] };
        }


        const categoryValues = categorical.categories[0].values;
        const legendValues = categorical.categories[1].values;
        const valueValues = categorical.values[0].values;
        const colors = this.host.colorPalette;


        // Iterate through each data point to create nodes and links
        for (let i = 0; i < categoryValues.length; i++) {
            const category = categoryValues[i].toString();
            const legend = legendValues[i].toString();
            const value = valueValues[i] as number;

            // Create or update nodes
            let sourceNodeIndex = nodes.findIndex(node => node.name === category);
            if (sourceNodeIndex === -1) {
                sourceNodeIndex = nodes.length;
                nodes.push({ name: category });
            }

            let targetNodeIndex = nodes.findIndex(node => node.name === legend);
            if (targetNodeIndex === -1) {
                targetNodeIndex = nodes.length;
                nodes.push({ name: legend });
            }

            const sourceColor = colors.getColor(category).value;
            const targetColor = colors.getColor(legend).value;
            nodes[sourceNodeIndex].color = sourceColor;
            nodes[targetNodeIndex].color = targetColor;


            links.push({
                source: sourceNodeIndex,
                target: targetNodeIndex,
                value: value,
                color: sourceColor
            });
        }

        return {
            nodes: nodes,
            links: links
        };
    }

    private render(data: SankeyChartData) {
        const width = this.target.clientWidth;
        const height = this.target.clientHeight;


        const svg = d3.select(this.target)
            .append("svg")
            .attr("width", width)
            .attr("height", height);
        const sankeyLayout = sankey<SankeyNode, SankeyLink>()
            .nodeWidth(15)
            .nodePadding(10)
            .extent([[1, 5], [width - 1, height - 5]]);
        const { nodes, links } = sankeyLayout(data);
        console.log(links.map(link => `Source: ${link.source}, Target: ${link.target}, Value: ${link.value}, Color: ${link.color}`));


        svg.append("g")
            .selectAll("rect")
            .data(nodes)
            .enter()
            .append("rect")
            .attr("x", d => d.x0)
            .attr("y", d => d.y0)
            .attr("width", d => d.x1 - d.x0)
            .attr("height", d => d.y1 - d.y0)
            .style("fill", d => d.color)
            .append("title")
            .style("fill", (d, i) => d.color)
            .text(d => `${d.name}\n${d.value}`);

        svg.append("g")

            .attr("stroke-opacity", 0.2)
            .selectAll("path")
            .data(links)
            .enter()
            .append("path")
            .attr("d", sankeyLinkHorizontal())
            .attr("stroke-width", d => Math.max(1, d.width))
            .style("stroke", (d, i) => d.color);


        svg.append("g")
            .selectAll("text")
            .data(nodes)
            .enter()
            .append("text")
            .attr("x", d => (d.x0 < width / 2) ? d.x1 + 6 : d.x0 - 6)
            .attr("y", d => (d.y1 + d.y0) / 2)
            .style("fill", d => d.color)
            .attr("dy", "0.35em")
            .attr("text-anchor", d => (d.x0 < width / 2) ? "start" : "end")
            .text(d => d.name)
            .style("fill", d => d.color)




    }


}